{"version":3,"sources":["../../src/interceptors/redirect.js"],"names":["requestHeaderName","responseHeaderName","RedirectInterceptor","options","uri","includes","spark","config","credentials","samlUrl","oauth","tokenUrl","authorizationUrl","headers","$redirectCount","response","maxAppLevelRedirects","reject","Error","request"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;AAEA,IAAMA,4CAAN,C,CATA;;;;;;AAUA,IAAMC,qCAAN;;AAEA;;;;IAGqBC,mB;;;;;;;;;;;;AAQnB;;;;;8BAKUC,O,EAAS;AACjB,UAAIA,QAAQC,GAAR,CAAYC,QAAZ,CAAqB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BC,OAAnD,KAA+DN,QAAQC,GAAR,CAAYC,QAAZ,CAAqB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BE,KAA9B,CAAoCC,QAAzD,CAA/D,IAAqIR,QAAQC,GAAR,CAAYC,QAAZ,CAAqB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,CAA8BE,KAA9B,CAAoCE,gBAAzD,CAAzI,EAAqN;AACnN,eAAOT,OAAP;AACD;;AAEDA,cAAQU,OAAR,CAAgBb,iBAAhB,IAAqC,IAArC;AACAG,cAAQW,cAAR,GAAyBX,QAAQW,cAAR,IAA0B,CAAnD;AACA,aAAOX,OAAP;AACD;;AAED;;;;;;;;;+BAMWA,O,EAASY,Q,EAAU;AAC5B,UAAIA,SAASF,OAAT,IAAoBE,SAASF,OAAT,CAAiBZ,kBAAjB,CAAxB,EAA8D;AAC5DE,kBAAU,qBAAMA,OAAN,CAAV;AACAA,gBAAQC,GAAR,GAAcW,SAASF,OAAT,CAAiBZ,kBAAjB,CAAd;AACAE,gBAAQW,cAAR,IAA0B,CAA1B;AACA,YAAIX,QAAQW,cAAR,GAAyB,KAAKR,KAAL,CAAWC,MAAX,CAAkBS,oBAA/C,EAAqE;AACnE,iBAAO,kBAAQC,MAAR,CAAe,IAAIC,KAAJ,8BAAf,CAAP;AACD;;AAED,eAAO,KAAKZ,KAAL,CAAWa,OAAX,CAAmBhB,OAAnB,CAAP;AACD;;AAED,aAAOY,QAAP;AACD;;;;AAzCD;;;6BAGgB;AACd,aAAO,IAAIb,mBAAJ,CAAwB,EAACI,OAAO,IAAR,EAAxB,CAAP;AACD;;;;;kBANkBJ,mB","file":"redirect.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {clone} from 'lodash';\nimport {Interceptor} from '@ciscospark/http-core';\n\nconst requestHeaderName = `cisco-no-http-redirect`;\nconst responseHeaderName = `cisco-location`;\n\n/**\n * @class\n */\nexport default class RedirectInterceptor extends Interceptor {\n  /**\n   * @returns {RedirectInterceptor}\n   */\n  static create() {\n    return new RedirectInterceptor({spark: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    if (options.uri.includes(this.spark.config.credentials.samlUrl) || options.uri.includes(this.spark.config.credentials.oauth.tokenUrl) || options.uri.includes(this.spark.config.credentials.oauth.authorizationUrl)) {\n      return options;\n    }\n\n    options.headers[requestHeaderName] = true;\n    options.$redirectCount = options.$redirectCount || 0;\n    return options;\n  }\n\n  /**\n   * @see Interceptor#onResponse\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    if (response.headers && response.headers[responseHeaderName]) {\n      options = clone(options);\n      options.uri = response.headers[responseHeaderName];\n      options.$redirectCount += 1;\n      if (options.$redirectCount > this.spark.config.maxAppLevelRedirects) {\n        return Promise.reject(new Error(`Maximum redirects exceeded`));\n      }\n\n      return this.spark.request(options);\n    }\n\n    return response;\n  }\n}\n"]}