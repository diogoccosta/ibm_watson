{"version":3,"sources":["../../../src/lib/storage/memory-store-adapter.js"],"names":["bind","namespace","options","reject","Error","logger","map","info","resolve","clear","del","key","delete","get","res","put","value","set"],"mappings":";;;;;;;;;;;;;;AAMA;;;;kBAEe;AACbA,MADa,gBACRC,SADQ,EACGC,OADH,EACY;AACvBA,cAAUA,WAAW,EAArB;AACA,QAAI,CAACD,SAAL,EAAgB;AACd,aAAO,kBAAQE,MAAR,CAAe,IAAIC,KAAJ,2BAAf,CAAP;AACD;;AAED,QAAI,CAACF,QAAQG,MAAb,EAAqB;AACnB,aAAO,kBAAQF,MAAR,CAAe,IAAIC,KAAJ,gCAAf,CAAP;AACD;;AAED,QAAMC,SAASH,QAAQG,MAAvB;;AAEA,QAAMC,MAAM,mBAAZ;AACAD,WAAOE,IAAP;AACA,WAAO,kBAAQC,OAAR,CAAgB;AACrBC,WADqB,mBACb;AACNJ,eAAOE,IAAP;AACA,eAAO,kBAAQC,OAAR,CAAgBF,IAAIG,KAAJ,EAAhB,CAAP;AACD,OAJoB;AAKrBC,SALqB,eAKjBC,GALiB,EAKZ;AACPN,eAAOE,IAAP,sCAAgDI,GAAhD;AACA,eAAO,kBAAQH,OAAR,CAAgBF,IAAIM,MAAJ,CAAWD,GAAX,CAAhB,CAAP;AACD,OARoB;AASrBE,SATqB,eASjBF,GATiB,EASZ;AACPN,eAAOE,IAAP,qCAA+CI,GAA/C;AACA,YAAMG,MAAMR,IAAIO,GAAJ,CAAQF,GAAR,CAAZ;AACA,YAAI,OAAOG,GAAP,gBAAJ,EAAgC;AAC9B,iBAAO,kBAAQX,MAAR,CAAe,2BAAf,CAAP;AACD;;AAED,eAAO,kBAAQK,OAAR,CAAgBM,GAAhB,CAAP;AACD,OAjBoB;AAkBrBC,SAlBqB,eAkBjBJ,GAlBiB,EAkBZK,KAlBY,EAkBL;AACdX,eAAOE,IAAP,qCAA+CI,GAA/C;AACA,eAAO,kBAAQH,OAAR,CAAgBF,IAAIW,GAAJ,CAAQN,GAAR,EAAaK,KAAb,CAAhB,CAAP;AACD;AArBoB,KAAhB,CAAP;AAuBD;AAtCY,C,EARf","file":"memory-store-adapter.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport {NotFoundError} from './errors';\n\nexport default {\n  bind(namespace, options) {\n    options = options || {};\n    if (!namespace) {\n      return Promise.reject(new Error(`\\`namespace\\` is required`));\n    }\n\n    if (!options.logger) {\n      return Promise.reject(new Error(`\\`options.logger\\` is required`));\n    }\n\n    const logger = options.logger;\n\n    const map = new Map();\n    logger.info(`memory-store-adapter: returning binding`);\n    return Promise.resolve({\n      clear() {\n        logger.info(`memory-store-adapter: clearing the binding`);\n        return Promise.resolve(map.clear());\n      },\n      del(key) {\n        logger.info(`memory-store-adapter: deleting \\`${key}\\``);\n        return Promise.resolve(map.delete(key));\n      },\n      get(key) {\n        logger.info(`memory-store-adapter: reading \\`${key}\\``);\n        const res = map.get(key);\n        if (typeof res === `undefined`) {\n          return Promise.reject(new NotFoundError());\n        }\n\n        return Promise.resolve(res);\n      },\n      put(key, value) {\n        logger.info(`memory-store-adapter: writing \\`${key}\\``);\n        return Promise.resolve(map.set(key, value));\n      }\n    });\n  }\n};\n"]}