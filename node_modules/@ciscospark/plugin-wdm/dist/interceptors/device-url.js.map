{"version":3,"sources":["../../src/interceptors/device-url.js"],"names":["DeviceUrlInterceptor","options","spark","device","url","headers","resolve","service","determineService","uri","then","catch","err","message","match"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AAGA;;;IAGqBA,oB;;;;;;;;;;;;AASnB;;;;;8BAKUC,O,EAAS;AAAA;;AACjB,UAAI,CAAC,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,GAAnB,IAA0BH,QAAQI,OAAR,IAAmB,sBAAsBJ,QAAQI,OAAjD,IAA4D,CAACJ,QAAQI,OAAR,oBAA3F,EAAgI;AAC9H,eAAO,kBAAQC,OAAR,CAAgBL,OAAhB,CAAP;AACD;;AAED,aAAO,kBAAQK,OAAR,CAAgBL,QAAQM,OAAR,IAAmB,KAAKL,KAAL,CAAWC,MAAX,CAAkBK,gBAAlB,CAAmCP,QAAQQ,GAA3C,CAAnC,EACJC,IADI,CACC,UAACH,OAAD,EAAa;AACjB,YAAIA,WAAWA,mBAAX,IAAkCA,kBAAtC,EAA0D;AACxD,6BAAIN,OAAJ,mCAA4C,OAAKC,KAAL,CAAWC,MAAX,CAAkBC,GAA9D;AACD;AACD,eAAOH,OAAP;AACD,OANI,EAOJU,KAPI,CAOE,UAACC,GAAD,EAAS;AACd,YAAIA,IAAIC,OAAJ,CAAYC,KAAZ,CAAkB,kCAAlB,CAAJ,EAA2D;AACzD,iBAAOb,OAAP;AACD;;AAED,cAAMW,GAAN;AACD,OAbI,CAAP;AAcD;;;;AAhCD;;;6BAGgB;AACd;AACA,aAAO,IAAIZ,oBAAJ,CAAyB,EAACE,OAAO,IAAR,EAAzB,CAAP;AACD;;;0BAlBH;;;;;kBAWqBF,oB","file":"device-url.js","sourcesContent":["/**!\n*\n* Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n*/\n\nimport {Interceptor} from '@ciscospark/http-core';\nimport {set} from 'lodash';\n\n/**\n * Adds 'cisco-device-url' header, as appropriate, to requests\n */\nexport default class DeviceUrlInterceptor extends Interceptor {\n  /**\n  * @returns {DeviceUrlInterceptor}\n  */\n  static create() {\n    /* eslint no-invalid-this: [0] */\n    return new DeviceUrlInterceptor({spark: this});\n  }\n\n  /**\n  * @see Interceptor#onRequest\n  * @param {Object} options\n  * @returns {Object}\n  */\n  onRequest(options) {\n    if (!this.spark.device.url || options.headers && `cisco-device-url` in options.headers && !options.headers[`cisco-device-url`]) {\n      return Promise.resolve(options);\n    }\n\n    return Promise.resolve(options.service || this.spark.device.determineService(options.uri))\n      .then((service) => {\n        if (service && service !== `oauth` && service !== `saml`) {\n          set(options, `headers['cisco-device-url']`, this.spark.device.url);\n        }\n        return options;\n      })\n      .catch((err) => {\n        if (err.message.match(/does not reflect a known service/)) {\n          return options;\n        }\n\n        throw err;\n      });\n  }\n}\n"]}